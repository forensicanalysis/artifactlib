name: CI
on:
  push:
    branches: [ master ]
  pull_request:

jobs:

  goartifacts:
    name: goartifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Setup go 1.13
        uses: actions/setup-go@v1
        with: {go-version: 1.13}
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Set system path
        run: echo "##[add-path]$(go env GOPATH)/bin"
        shell: bash
      - name: Download dependencies
        run: go mod download

      - name: Install golangci-lint & go-acc
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.24.0
          go get -u github.com/ory/go-acc
        shell: bash

      - name: Lint
        run: golangci-lint run --verbose --config test/.golangci.yml --enable gofmt --enable goimports
        if: matrix.os != 'windows-latest'
      - name: Lint Windows
        run: golangci-lint run --verbose --config test/.golangci.yml
        if: matrix.os == 'windows-latest'
      - name: Test
        run: go-acc ./...
        shell: bash
      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f coverage.txt
        if: matrix.os == 'windows-latest'
        shell: bash

  artifactvalidator:
    name: artifactvalidator
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Setup go 1.13
        uses: actions/setup-go@v1
        with: {go-version: '1.13'}
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Set system path
        run: echo "##[add-path]$(go env GOPATH)/bin"
        shell: bash
      - name: Download dependencies
        run: go mod download

      - name: Setup node
        uses: actions/setup-node@v1
        with: {node-version: '10.x'}
      - name: Install bats
        run: npm install -g bats

      - name: Build
        run: |
          go build .
          go install .
          mkdir bin
          mv artifact* bin
        working-directory: ./cmd/artifactvalidator
        shell: bash

      - name: Bats test
        run: bats test/bats/artifactvalidator.bats
        shell: bash

      - name: Upload
        uses: actions/upload-artifact@master
        with:
          name: artifactvalidator ${{ matrix.os }}
          path: ./cmd/artifactvalidator/bin

  pyartifacts:
    name: pyartifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install pylint pytest pytest-cov

      - run: pip install .

      - run: pylint pyartifacts --rcfile test/python/.pylintrc
      - run: pytest -v --cov-report=xml --cov=pyartifacts ../test/python
        shell: bash
        working-directory: pyartifacts

      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) -f pyartifacts/coverage.xml
        if: matrix.os == 'windows-latest' && matrix.python-version == 3.8
        shell: bash

      - name: Python Documentation
        run: |
          pip install 'sphinx==1.8.5' sphinx_rtd_theme sphinx_markdown_builder
          sphinx-build -M html pyartifacts/docs/src/ public/pyartifacts/docs/
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.8 && github.ref == 'refs/heads/master'
      - run: touch public/.nojekyll
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.8 && github.ref == 'refs/heads/master'
      - name: Build and Deploy
        uses: peaceiris/actions-gh-pages@v2
        env:
          ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: public
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.8 && github.ref == 'refs/heads/master'

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Setup go 1.13
        uses: actions/setup-go@v1
        with: {go-version: '1.13'}
      - name: Set system path
        run: echo "##[add-path]$(go env GOPATH)/bin"
        shell: bash
      - run: go get -u github.com/cugu/godoc2readme

      - name: Checkout code
        uses: actions/checkout@v1
      - run: godoc2readme --template docs/readme-template.md . > README2.md
      - run: diff README.md README2.md
